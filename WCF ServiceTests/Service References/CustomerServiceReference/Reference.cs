//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_ServiceTests.CustomerServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerServiceReference.ICustomerService")]
    public interface ICustomerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/createCustomer", ReplyAction="http://tempuri.org/ICustomerService/createCustomerResponse")]
        int createCustomer(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/createCustomer", ReplyAction="http://tempuri.org/ICustomerService/createCustomerResponse")]
        System.Threading.Tasks.Task<int> createCustomerAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/getCustIDByUsername", ReplyAction="http://tempuri.org/ICustomerService/getCustIDByUsernameResponse")]
        int getCustIDByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/getCustIDByUsername", ReplyAction="http://tempuri.org/ICustomerService/getCustIDByUsernameResponse")]
        System.Threading.Tasks.Task<int> getCustIDByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/getAddressesByCustID", ReplyAction="http://tempuri.org/ICustomerService/getAddressesByCustIDResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.AddressDTO> getAddressesByCustID(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/getAddressesByCustID", ReplyAction="http://tempuri.org/ICustomerService/getAddressesByCustIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.AddressDTO>> getAddressesByCustIDAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/createAddress", ReplyAction="http://tempuri.org/ICustomerService/createAddressResponse")]
        int createAddress(WCF_Service.DataTransferObjects.AddressDTO newAddress, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/createAddress", ReplyAction="http://tempuri.org/ICustomerService/createAddressResponse")]
        System.Threading.Tasks.Task<int> createAddressAsync(WCF_Service.DataTransferObjects.AddressDTO newAddress, int customerID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerServiceChannel : WCF_ServiceTests.CustomerServiceReference.ICustomerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<WCF_ServiceTests.CustomerServiceReference.ICustomerService>, WCF_ServiceTests.CustomerServiceReference.ICustomerService {
        
        public CustomerServiceClient() {
        }
        
        public CustomerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int createCustomer(string Username) {
            return base.Channel.createCustomer(Username);
        }
        
        public System.Threading.Tasks.Task<int> createCustomerAsync(string Username) {
            return base.Channel.createCustomerAsync(Username);
        }
        
        public int getCustIDByUsername(string username) {
            return base.Channel.getCustIDByUsername(username);
        }
        
        public System.Threading.Tasks.Task<int> getCustIDByUsernameAsync(string username) {
            return base.Channel.getCustIDByUsernameAsync(username);
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.AddressDTO> getAddressesByCustID(int customerID) {
            return base.Channel.getAddressesByCustID(customerID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.AddressDTO>> getAddressesByCustIDAsync(int customerID) {
            return base.Channel.getAddressesByCustIDAsync(customerID);
        }
        
        public int createAddress(WCF_Service.DataTransferObjects.AddressDTO newAddress, int customerID) {
            return base.Channel.createAddress(newAddress, customerID);
        }
        
        public System.Threading.Tasks.Task<int> createAddressAsync(WCF_Service.DataTransferObjects.AddressDTO newAddress, int customerID) {
            return base.Channel.createAddressAsync(newAddress, customerID);
        }
    }
}
