//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_ServiceTests.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProducts", ReplyAction="http://tempuri.org/IProductService/GetProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByCat", ReplyAction="http://tempuri.org/IProductService/GetProductsByCatResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsByCat(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByCat", ReplyAction="http://tempuri.org/IProductService/GetProductsByCatResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsByCatAsync(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsBySubCat", ReplyAction="http://tempuri.org/IProductService/GetProductsBySubCatResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsBySubCat(int SubCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsBySubCat", ReplyAction="http://tempuri.org/IProductService/GetProductsBySubCatResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsBySubCatAsync(int SubCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductByID", ReplyAction="http://tempuri.org/IProductService/GetProductByIDResponse")]
        WCF_Service.DataTransferObjects.ProductDTO GetProductByID(int ProductId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductByID", ReplyAction="http://tempuri.org/IProductService/GetProductByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service.DataTransferObjects.ProductDTO> GetProductByIDAsync(int ProductId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        void AddProduct(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/AddProduct", ReplyAction="http://tempuri.org/IProductService/AddProductResponse")]
        System.Threading.Tasks.Task AddProductAsync(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/EditProduct", ReplyAction="http://tempuri.org/IProductService/EditProductResponse")]
        void EditProduct(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/EditProduct", ReplyAction="http://tempuri.org/IProductService/EditProductResponse")]
        System.Threading.Tasks.Task EditProductAsync(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        void DeleteProduct(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/DeleteProduct", ReplyAction="http://tempuri.org/IProductService/DeleteProductResponse")]
        System.Threading.Tasks.Task DeleteProductAsync(WCF_Service.DataTransferObjects.ProductDTO product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetSubCategoryByID", ReplyAction="http://tempuri.org/IProductService/GetSubCategoryByIDResponse")]
        WCF_Service.DataTransferObjects.SubCategoryDTO GetSubCategoryByID(int SubCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetSubCategoryByID", ReplyAction="http://tempuri.org/IProductService/GetSubCategoryByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service.DataTransferObjects.SubCategoryDTO> GetSubCategoryByIDAsync(int SubCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetSubCategory", ReplyAction="http://tempuri.org/IProductService/GetSubCategoryResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.SubCategoryDTO> GetSubCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetSubCategory", ReplyAction="http://tempuri.org/IProductService/GetSubCategoryResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.SubCategoryDTO>> GetSubCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByTopSales", ReplyAction="http://tempuri.org/IProductService/GetProductsByTopSalesResponse")]
        System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsByTopSales(int countReturned);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetProductsByTopSales", ReplyAction="http://tempuri.org/IProductService/GetProductsByTopSalesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsByTopSalesAsync(int countReturned);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : WCF_ServiceTests.ProductServiceReference.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<WCF_ServiceTests.ProductServiceReference.IProductService>, WCF_ServiceTests.ProductServiceReference.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProducts() {
            return base.Channel.GetProducts();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsAsync() {
            return base.Channel.GetProductsAsync();
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsByCat(int CategoryId) {
            return base.Channel.GetProductsByCat(CategoryId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsByCatAsync(int CategoryId) {
            return base.Channel.GetProductsByCatAsync(CategoryId);
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsBySubCat(int SubCategoryId) {
            return base.Channel.GetProductsBySubCat(SubCategoryId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsBySubCatAsync(int SubCategoryId) {
            return base.Channel.GetProductsBySubCatAsync(SubCategoryId);
        }
        
        public WCF_Service.DataTransferObjects.ProductDTO GetProductByID(int ProductId) {
            return base.Channel.GetProductByID(ProductId);
        }
        
        public System.Threading.Tasks.Task<WCF_Service.DataTransferObjects.ProductDTO> GetProductByIDAsync(int ProductId) {
            return base.Channel.GetProductByIDAsync(ProductId);
        }
        
        public void AddProduct(WCF_Service.DataTransferObjects.ProductDTO product) {
            base.Channel.AddProduct(product);
        }
        
        public System.Threading.Tasks.Task AddProductAsync(WCF_Service.DataTransferObjects.ProductDTO product) {
            return base.Channel.AddProductAsync(product);
        }
        
        public void EditProduct(WCF_Service.DataTransferObjects.ProductDTO product) {
            base.Channel.EditProduct(product);
        }
        
        public System.Threading.Tasks.Task EditProductAsync(WCF_Service.DataTransferObjects.ProductDTO product) {
            return base.Channel.EditProductAsync(product);
        }
        
        public void DeleteProduct(WCF_Service.DataTransferObjects.ProductDTO product) {
            base.Channel.DeleteProduct(product);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(WCF_Service.DataTransferObjects.ProductDTO product) {
            return base.Channel.DeleteProductAsync(product);
        }
        
        public WCF_Service.DataTransferObjects.SubCategoryDTO GetSubCategoryByID(int SubCategoryId) {
            return base.Channel.GetSubCategoryByID(SubCategoryId);
        }
        
        public System.Threading.Tasks.Task<WCF_Service.DataTransferObjects.SubCategoryDTO> GetSubCategoryByIDAsync(int SubCategoryId) {
            return base.Channel.GetSubCategoryByIDAsync(SubCategoryId);
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.SubCategoryDTO> GetSubCategory() {
            return base.Channel.GetSubCategory();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.SubCategoryDTO>> GetSubCategoryAsync() {
            return base.Channel.GetSubCategoryAsync();
        }
        
        public System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO> GetProductsByTopSales(int countReturned) {
            return base.Channel.GetProductsByTopSales(countReturned);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCF_Service.DataTransferObjects.ProductDTO>> GetProductsByTopSalesAsync(int countReturned) {
            return base.Channel.GetProductsByTopSalesAsync(countReturned);
        }
    }
}
